/*
Copyright 2024 SUSE Rancher

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	v1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ReplicaSetController interface for managing ReplicaSet resources.
type ReplicaSetController interface {
	generic.ControllerInterface[*v1.ReplicaSet, *v1.ReplicaSetList]
}

// ReplicaSetClient interface for managing ReplicaSet resources in Kubernetes.
type ReplicaSetClient interface {
	generic.ClientInterface[*v1.ReplicaSet, *v1.ReplicaSetList]
}

// ReplicaSetCache interface for retrieving ReplicaSet resources in memory.
type ReplicaSetCache interface {
	generic.CacheInterface[*v1.ReplicaSet]
}

type ReplicaSetStatusHandler func(obj *v1.ReplicaSet, status v1.ReplicaSetStatus) (v1.ReplicaSetStatus, error)

type ReplicaSetGeneratingHandler func(obj *v1.ReplicaSet, status v1.ReplicaSetStatus) ([]runtime.Object, v1.ReplicaSetStatus, error)

func RegisterReplicaSetStatusHandler(ctx context.Context, controller ReplicaSetController, condition condition.Cond, name string, handler ReplicaSetStatusHandler) {
	statusHandler := &replicaSetStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterReplicaSetGeneratingHandler(ctx context.Context, controller ReplicaSetController, apply apply.Apply,
	condition condition.Cond, name string, handler ReplicaSetGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &replicaSetGeneratingHandler{
		ReplicaSetGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterReplicaSetStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type replicaSetStatusHandler struct {
	client    ReplicaSetClient
	condition condition.Cond
	handler   ReplicaSetStatusHandler
}

func (a *replicaSetStatusHandler) sync(key string, obj *v1.ReplicaSet) (*v1.ReplicaSet, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type replicaSetGeneratingHandler struct {
	ReplicaSetGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *replicaSetGeneratingHandler) Remove(key string, obj *v1.ReplicaSet) (*v1.ReplicaSet, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.ReplicaSet{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *replicaSetGeneratingHandler) Handle(obj *v1.ReplicaSet, status v1.ReplicaSetStatus) (v1.ReplicaSetStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ReplicaSetGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
