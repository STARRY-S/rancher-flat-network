/*
Copyright 2024 SUSE Rancher

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/cnrancher/rancher-flat-network/pkg/apis/flatnetwork.pandaria.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FlatNetworkIPLister helps list FlatNetworkIPs.
// All objects returned here must be treated as read-only.
type FlatNetworkIPLister interface {
	// List lists all FlatNetworkIPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FlatNetworkIP, err error)
	// FlatNetworkIPs returns an object that can list and get FlatNetworkIPs.
	FlatNetworkIPs(namespace string) FlatNetworkIPNamespaceLister
	FlatNetworkIPListerExpansion
}

// flatNetworkIPLister implements the FlatNetworkIPLister interface.
type flatNetworkIPLister struct {
	indexer cache.Indexer
}

// NewFlatNetworkIPLister returns a new FlatNetworkIPLister.
func NewFlatNetworkIPLister(indexer cache.Indexer) FlatNetworkIPLister {
	return &flatNetworkIPLister{indexer: indexer}
}

// List lists all FlatNetworkIPs in the indexer.
func (s *flatNetworkIPLister) List(selector labels.Selector) (ret []*v1.FlatNetworkIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FlatNetworkIP))
	})
	return ret, err
}

// FlatNetworkIPs returns an object that can list and get FlatNetworkIPs.
func (s *flatNetworkIPLister) FlatNetworkIPs(namespace string) FlatNetworkIPNamespaceLister {
	return flatNetworkIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FlatNetworkIPNamespaceLister helps list and get FlatNetworkIPs.
// All objects returned here must be treated as read-only.
type FlatNetworkIPNamespaceLister interface {
	// List lists all FlatNetworkIPs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.FlatNetworkIP, err error)
	// Get retrieves the FlatNetworkIP from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.FlatNetworkIP, error)
	FlatNetworkIPNamespaceListerExpansion
}

// flatNetworkIPNamespaceLister implements the FlatNetworkIPNamespaceLister
// interface.
type flatNetworkIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FlatNetworkIPs in the indexer for a given namespace.
func (s flatNetworkIPNamespaceLister) List(selector labels.Selector) (ret []*v1.FlatNetworkIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FlatNetworkIP))
	})
	return ret, err
}

// Get retrieves the FlatNetworkIP from the indexer for a given namespace and name.
func (s flatNetworkIPNamespaceLister) Get(name string) (*v1.FlatNetworkIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("flatnetworkip"), name)
	}
	return obj.(*v1.FlatNetworkIP), nil
}
