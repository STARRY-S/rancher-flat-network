name: Release

on:
  push:
    tags:
      - 'v*'

# GitHub settings / example values:
#
# org level vars:
#   - PUBLIC_REGISTRY: docker.io
# repo level vars:
#   - PUBLIC_REGISTRY_REPO: cnrancher
# repo level secrets:
#   - PUBLIC_REGISTRY_USERNAME
#   - PUBLIC_REGISTRY_PASSWORD

jobs:
  release:
    permissions:
      contents: write # required for creating GH release
      id-token: write # required for reading vault secrets
    runs-on: ubuntu-latest
    steps:
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.PUBLIC_REGISTRY }}
        username: ${{ secrets.PUBLIC_REGISTRY_USERNAME }}
        password: ${{ secrets.PUBLIC_REGISTRY_PASSWORD }}
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref_name}}
    - name: Build and push all image variations
      run: |
        ./scripts/validate.sh
        ./scripts/test.sh
        ./scripts/build.sh
        ./scripts/image-push.sh
      env:
        TAG: ${{ github.ref_name }}
        REPO: ${{ vars.PUBLIC_REGISTRY }}/${{ vars.PUBLIC_REGISTRY_REPO }}
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for creating GH release
      id: goreleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: "~> v2"
        args: release --clean --verbose
    - name: Upload charts to release
      env:
        TAG: ${{ github.ref_name }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # required for updating GH release
      run: |
        ./scripts/package.sh
        for f in $(find dist/artifacts/ -name '*.tgz'); do
          echo "Uploading $f to GitHub release $TAG"
          gh release upload $TAG $f
        done
        echo "Charts successfully uploaded to GitHub release $TAG"
